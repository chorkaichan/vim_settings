global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet de "default export" b
import { ReactElement } from 'react'

const ${1:`!v expand('%:t:r')`} = (): ReactElement | null => {
	return (
		${2}$0
	)
}

export default $1
endsnippet

snippet dep "default export with props" b
import { ReactElement } from 'react'

type $1Props = {
	$3
}

const ${1:`!v expand('%:t:r')`} = (${2:props}: $1Props): ReactElement | null => {
	return (
		${4}$0
	)
}

export default $1
endsnippet

snippet e "export" b
import { ReactElement } from 'react'

export const ${1:`!v expand('%:t:r')`} = (): ReactElement | null => {
	return (
		${2}$0
	)
}
endsnippet

snippet ep "export with props" b
import { ReactElement } from 'react'

type $1Props = {
	$3
}

export const ${1:`!v expand('%:t:r')`} = (${2:props}: $1Props): ReactElement | null => {
	return (
		${4}$0
	)
}
endsnippet

snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`'$0
endsnippet

snippet impf "import File from './File'" b
import $1 from '${2:./}${3:$1}'$0
endsnippet

snippet impn "import { nested } from" b
import { $1 } from '$2'$0
endsnippet

snippet uses "useState()" b
const [ $1, set$4`!p snip.rv=upperfirst(t[1])` ] = useState<$3>($2)$0
endsnippet

snippet user "useRef()" b
const $1 = useRef<$3>($2)$0
endsnippet

snippet usee "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

snippet ho "hook" b
import { useState, Dispatch, SetStateAction } from 'react'

type State = {
	$2
}

type ReturnType = State & {
	$3
}

const initialState: State = {
	$4
}

const ${1:`!v expand('%:t:r')`} = (state: State = initialState): ReturnType => {
	$0

	return {

	}
}

export default $1
endsnippet

snippet di "Dispatch" b
$1: Dispatch<SetStateAction<$2>>;
endsnippet
